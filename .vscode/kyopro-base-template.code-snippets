{
	// Place your Algorithm workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"base template": {
		"scope": "go",
		"prefix": "base",
		"body": [
			"package main",
			"import \"fmt\"",
			"func main(){",
			"\tvar ${1: N} int",
			"\tfmt.Scan(&N)",
			"}"
		],
	},
	"base template (fast)": {
		"scope": "go",
		"prefix": "template",
		"body": [
			"package main",
			"import (",
			"\t\"bufio\"",
			"\t\"fmt\"",
			"\t\"os\"",
			"\t\"sort\"",
			"\t\"strconv\"",
			")",
			"",
			"var sc = bufio.NewScanner(os.Stdin)",
			"var out = bufio.NewWriter(os.Stdout)",
			"",
			"func main(){",
			"\tbuf := make([]byte, 1024*1024)",
			"\tsc.Buffer(buf, bufio.MaxScanTokenSize)",
			"\tsc.Split(bufio.ScanWords)",
			"\tdefer out.Flush()",
			"\t${1:N} := nextInt()",
			"\tfmt.Fprintln(out, N)",
			"}",
			"",
			"func next() string {",
			"\tsc.Scan()",
			"\treturn sc.Text()",
			"}",
			"",
			"func nextInt() int {",
			"\ta, _ := strconv.Atoi(next())",
			"\treturn a",
			"}",
			"",
			"func nextInts(n int) []int{",
			"\tret := make([]int, n)",
			"\tfor i := 0; i < n; i++ {",
			"\t\tret[i] = nextInt()",
			"\t}",
			"\treturn ret",
			"}",
			"",
			"func nextStrings(n int) []string {",
			"\tret := make([]string, n)",
			"\tfor i := 0; i < n; i++ {",
			"\t\tret[i] = next()",
			"\t}",
			"\treturn ret",
			"}",
			"",
			"func chars(s string) []string {",
			"\tret := make([]string, len([]rune(s)))",
			"\tfor i, v := range []rune(s) {",
			"\t\tret[i] = string(v)",
			"\t}",
			"\treturn ret",
			"}",
		],
		"description": "kyopro base tamplate(plane)"
	},
	"minmax": {
		"scope": "go",
		"prefix": "minmax",
		"body": [
			"func min(a, b int) int {",
			"\tif a<b{",
			"\t\treturn a",
			"\t}",
			"\treturn b",
			"}",
			"",
			"func max(a, b int) int {",
			"\tif a<b{",
			"\t\treturn b",
			"\t}",
			"\treturn a",
			"}",
		],
		"description": "return min and max(int only)"
	},
}